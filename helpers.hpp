#pragma once

#include <iostream>
#include <ostream>

#include "stm32f429i_discovery.h"

#define GREEN_LED   DISCO_LED3
#define RED_LED     DISCO_LED4

#define SCREEN_WIDTH    240
#define SCREEN_HEIGHT   320


#define NR_PRECOMPUTED_TRIG_VALS 36
const float sin_values[NR_PRECOMPUTED_TRIG_VALS] = {
    -1.2246467991473532e-16, -0.17364817766693028, -0.3420201433256689, -0.49999999999999994, -0.6427876096865395, -0.766044443118978,
    -0.8660254037844387, -0.9396926207859084, -0.984807753012208, -1.0, -0.984807753012208, -0.9396926207859083,
    -0.8660254037844386, -0.766044443118978, -0.6427876096865393, -0.49999999999999994, -0.3420201433256687, -0.17364817766693033,
    0.0, 0.17364817766693033, 0.3420201433256687, 0.49999999999999994, 0.6427876096865393, 0.766044443118978,
    0.8660254037844386, 0.9396926207859083, 0.984807753012208, 1.0, 0.984807753012208, 0.9396926207859084,
    0.8660254037844387, 0.766044443118978, 0.6427876096865395, 0.49999999999999994, 0.3420201433256689, 0.17364817766693028
};
const float cos_values[NR_PRECOMPUTED_TRIG_VALS] = {
    -1.0, -0.984807753012208, -0.9396926207859083, -0.8660254037844387, -0.7660444431189779, -0.6427876096865394,
    -0.4999999999999998, -0.3420201433256687, -0.1736481776669303, 6.123233995736766e-17, 0.17364817766693041, 0.3420201433256688,
    0.5000000000000001, 0.6427876096865394, 0.766044443118978, 0.8660254037844387, 0.9396926207859084, 0.984807753012208,
    1.0, 0.984807753012208, 0.9396926207859084, 0.8660254037844387, 0.766044443118978, 0.6427876096865394,
    0.5000000000000001, 0.3420201433256688, 0.17364817766693041, 6.123233995736766e-17, -0.1736481776669303, -0.3420201433256687,
    -0.4999999999999998, -0.6427876096865394, -0.7660444431189779, -0.8660254037844387, -0.9396926207859083, -0.984807753012208
};

struct Vec3d {
    float x, y, z;
};
Vec3d rotateYCenter(Vec3d vec, int16_t angle_idx);
Vec3d rotateXCenter(Vec3d vec, int16_t angle_idx);
Vec3d move(Vec3d vec, float dx, float dy, float dz);

struct Vec2d {
    float x, y;
};
Vec2d getScreenCoordsFrom3d(Vec3d vec);
bool checkInBounds(Vec2d vec);